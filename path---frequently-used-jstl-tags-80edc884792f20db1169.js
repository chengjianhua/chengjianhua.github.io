webpackJsonp([0xe994682efbe6],{531:function(t,e){t.exports={data:{site:{siteMetadata:{title:"Blog - Jianhua Cheng",author:"Jianhua Cheng"}},markdownRemark:{id:"/Users/chengjianhua/Documents/codes/chengjianhua.github.io/src/pages/frequently-used-jstl-tags/index.md absPath of file >>> MarkdownRemark",html:'<h2>常用JSTL标签的使用</h2>\n<hr>\n<h3>1.<code class="language-text">out</code>标签</h3>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;c:out value=&quot;value&quot; [escapeXml=&quot;{true|false}&quot;] [default=&quot;defaultValue&quot;]/&gt;\n\n//括号中的内容为可选项</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;c:out value=&quot;value&quot; [escapeXml=&quot;{true|false}&quot;]&gt;\n\tdefaultValue\n&lt;/c:out&gt;</code></pre>\n      </div>\n<p><strong>注意：</strong>如果<code class="language-text">escapeXml</code>值为<code class="language-text">true</code>的话，那么<code class="language-text">value</code>中的字符串中包含的”,&#x26;,’,&#x3C;,>等等特殊字符将会被转化成对应的字符实体代码 <code class="language-text">&amp;#034;</code> <code class="language-text">&amp;amp;</code> <code class="language-text">&amp;#039;</code> <code class="language-text">&amp;lt;</code> <code class="language-text">&amp;gt;</code></p>\n<p><code class="language-text">EL</code>函数中类似的用法:</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">${fn:escapeXml(&quot;Use &lt;br&gt; to change lines&quot;)}</code></pre>\n      </div>\n<h3>2.<code class="language-text">foreach</code>标签</h3>\n<!-- more -->\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;c:forEach items=&quot;collection&quot; [var=&quot;varName&quot;] [begin=&quot;begin&quot;] [end=&quot;end&quot;] [step=&quot;step&quot;] [varStatus=&quot;varStatusName&quot;]&gt;\n\tbody content\n&lt;/c:forEach&gt;</code></pre>\n      </div>\n<p><strong>注意：</strong>\n1. <code class="language-text">items</code>表示需要迭代的对象集合，可以迭代的对象包括所有的<code class="language-text">java.util.Iterator</code>和<code class="language-text">java.util.Map</code>接口的实现，以及对象或者基本类型的数组。\n2. <code class="language-text">varStatus</code>返回当前迭代的次数，类似于在for循环中int i 的递增\n3. <code class="language-text">begin</code> 可以指定迭代开始的索引\n4. <code class="language-text">end</code>可以指定迭代结束的索引\n5. <code class="language-text">step</code>表示迭代的索引递增的步长，如果该值要有的话必须大于等于1</p>\n<h3>3.<code class="language-text">if</code>标签</h3>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">没有主体内容的形式，在这种情况下，var指定的限域变量一般由同一个JSP页面中更后面的另一个标签的测试所决定</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;c:if test=&quot;testCondition&quot; var=&quot;varName&quot; [scope=&quot;{page|request|session|application}&quot;]/&gt;</code></pre>\n      </div>\n<p>有主体内容为JSP的，如果测试结果为true，主体内容就会得到处理，否则不处理。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;c:if test=&quot;testCondition&quot; [var=&quot;varName&quot;] [scope=&quot;{page|request|session|application}&quot;]&gt;\n\tbody content\n&lt;/c:if&gt;</code></pre>\n      </div>\n<h3>4.<code class="language-text">formatDate</code>标签</h3>\n<p>完整语法格式：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;fmt:formatDate value = &quot;date&quot;\n\t[type=&quot;{time|date|both}&quot;]\n\t[dateStyle=&quot;{default|short|medium|long|full}&quot;]\n\t[timeStyle=&quot;{default|short|medium|long|full}&quot;]\n\t[pattern=&quot;customPattern&quot;]\n\t[timeZone=&quot;timeZone&quot;]\n\t[var=&quot;varName&quot;]\n\t[scope=&quot;{page|request|session|application}&quot;]\n/&gt;</code></pre>\n      </div>\n<p>使用示例：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&lt;fmt:formatDate value=&quot;&lt;%=new Date()%&gt;&quot; type=&quot;both&quot; pattern=&quot;yyyy年MM月dd日 hh小时mm分钟ss秒&quot; /&gt;\n//效果显示：2015年9月10日 22小时06分10秒</code></pre>\n      </div>\n<p><strong>以上是使用的最多的几个，几乎是一个网站制作过程必然用到的，剩下的一些好用的标签但不是那么常用的以后再补充。</strong></p>',frontmatter:{title:"常用的 JSTL 标签",date:"March 23, 2016"}}},pathContext:{slug:"/frequently-used-jstl-tags/",previous:{fields:{slug:"/knowledges-about-jsp-servlet-container/"},frontmatter:{title:"初学者对Servlet、JSP及Web容器之间关系的理解"}},next:{fields:{slug:"/exists-compareTo-not-exists/"},frontmatter:{title:"exists与not exists的概念与用法"}}}}}});
//# sourceMappingURL=path---frequently-used-jstl-tags-80edc884792f20db1169.js.map